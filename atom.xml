<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OTAKISM</title>
  
  <subtitle>やはり俺の青春ラブコメはまちがっている</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://keren_akaya.com/"/>
  <updated>2018-01-26T20:13:19.208Z</updated>
  <id>http://keren_akaya.com/</id>
  
  <author>
    <name>KerenAka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to install tensorflow</title>
    <link href="http://keren_akaya.com/2018/01/26/How-to-install-tensorflow/"/>
    <id>http://keren_akaya.com/2018/01/26/How-to-install-tensorflow/</id>
    <published>2018-01-26T20:05:09.000Z</published>
    <updated>2018-01-26T20:13:19.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Install-tensor-flow-in-virtualenv"><a href="#Install-tensor-flow-in-virtualenv" class="headerlink" title="Install tensor flow in virtualenv"></a>Install tensor flow in virtualenv</h2><p>Configuration:</p><ul><li>macOS High Sierra 10.13.2</li><li>Virtualenv python3.6</li><li>Tensorflow 1.3.0</li></ul><hr><ol><li><p>Create a virtualenv environment.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip3 install --upgrade virtualenv</div><div class="line"></div><div class="line">virtualenv -- system-site-packages -p python3 ~/tensorflow #python3</div></pre></td></tr></table></figure></li><li><p>Activate the virtualenv environment.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/tensorflow/bin/activate</div></pre></td></tr></table></figure></li><li><p>Install tensor flow.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(tensorflow)$ pip3 install --upgrade tensorflow</div></pre></td></tr></table></figure></li><li><p>If you can’t import tensorflow in promt. Issue a command of the following format.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip3 install --upgrade</div><div class="line">\https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.3.0-py3-none-any.whl</div></pre></td></tr></table></figure></li></ol><p>结束！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Install-tensor-flow-in-virtualenv&quot;&gt;&lt;a href=&quot;#Install-tensor-flow-in-virtualenv&quot; class=&quot;headerlink&quot; title=&quot;Install tensor flow in vir
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="tensorflow" scheme="http://keren_akaya.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter(IPython-notebook) Installation</title>
    <link href="http://keren_akaya.com/2018/01/26/Jupyter-IPython-notebook-Installation/"/>
    <id>http://keren_akaya.com/2018/01/26/Jupyter-IPython-notebook-Installation/</id>
    <published>2018-01-26T20:00:31.000Z</published>
    <updated>2018-01-26T20:04:16.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jupyter-IPython-note-Installation"><a href="#Jupyter-IPython-note-Installation" class="headerlink" title="Jupyter(IPython-note) Installation"></a>Jupyter(IPython-note) Installation</h2><p>Just a backup.</p><ol><li><p>Install Jupyter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install --user jupyter</div></pre></td></tr></table></figure><p>​</p></li><li><p>In command-line:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m IPython notebook</div></pre></td></tr></table></figure></li></ol><p>A new window will be pop up ( <a href="http://localhost:8889/tree" target="_blank" rel="external">http://localhost:8889/tree</a>)</p><p>In the top right corner you can new and upload new files, create terminal, etc.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jupyter-IPython-note-Installation&quot;&gt;&lt;a href=&quot;#Jupyter-IPython-note-Installation&quot; class=&quot;headerlink&quot; title=&quot;Jupyter(IPython-note) Inst
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="installation" scheme="http://keren_akaya.com/tags/installation/"/>
    
  </entry>
  
  <entry>
    <title>String&amp;StringBuffer&amp;StringBuilder</title>
    <link href="http://keren_akaya.com/2018/01/22/String-StringBuffer-StringBuilder/"/>
    <id>http://keren_akaya.com/2018/01/22/String-StringBuffer-StringBuilder/</id>
    <published>2018-01-22T17:53:26.000Z</published>
    <updated>2018-01-23T05:02:14.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-StringBuffer-amp-StringBuilder"><a href="#String-StringBuffer-amp-StringBuilder" class="headerlink" title="String , StringBuffer &amp; StringBuilder"></a>String , StringBuffer &amp; StringBuilder</h2><p>这三种东西，我其实一直不太理解区别，在网上搜集了一些资料，加深记忆一下。</p><p>Speed ：StringBuilder &gt; StringBuffer &gt; String</p><ul><li><p>String是字符串常量，是literal不可变的对象。</p><p>怎么说不可变呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"abc"</span>;</div><div class="line">s = s+d; <span class="comment">//s=abcd</span></div></pre></td></tr></table></figure><p>然而其实jvm并不是改变了原本的对象，而是先创建了一个新的对象（值为abcd）然后将引用s指向后创建的对象。换言之，我们之前创建的对象并没有被改变，而是被当成垃圾回收掉了。不停创建新的对象，所以速度慢慢的。</p></li><li><p>StringBuffer &amp; StringBuilder是字符串变量，是可以改变的对象。我们在用他们对字符串进行操作的时候，实际上是在一个对象操作。而不是像string那样创建一些新的对象操作，速度upup。</p></li><li><p>StringBuilder&amp;StringBuffer</p><p>前者是线程非安全的，后者是线程安全的。</p></li></ul><h4 id="Some-methods-of-StringBuffer"><a href="#Some-methods-of-StringBuffer" class="headerlink" title="Some methods of StringBuffer"></a>Some methods of StringBuffer</h4><table><thead><tr><th>No.</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>public StringBuffer append(String s)</td></tr><tr><td>2</td><td>public StringBuffer reverse()</td></tr><tr><td>3</td><td>public delete(int start, int end)</td></tr><tr><td>4</td><td>Public insert(int offset, int i)  将int参数以字符串形式插入序列</td></tr><tr><td>5</td><td>replace(int start, int end, String str)</td></tr></tbody></table><table><thead><tr><th>No.</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>int capacity()</td></tr><tr><td>2</td><td>char charAt(int index)</td></tr><tr><td>3</td><td>void ensureCapacity(int minimumCapacity)确保容量至少等于制定的最小值</td></tr><tr><td>4</td><td>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组dst</td></tr><tr><td>5</td><td>int indexOf(String str [int fromIndex])</td></tr><tr><td>6</td><td>int lastIndexOf(String str [int fromIndex])</td></tr><tr><td>7</td><td>void setCharAt(int index, char ch)</td></tr><tr><td>8</td><td>String substring()</td></tr><tr><td>9</td><td>String toString()</td></tr></tbody></table><p>To sum up, </p><ol><li>如何数据量少，用String；</li></ol><ol><li>如果单线程操作字符串缓冲区下，操作大量数据 StringBuilder；</li><li>同理，多线程下，用StringBuffer。</li></ol><p>自己看看学习吧。很多是从网上借鉴的。</p><p><a href="https://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html" target="_blank" rel="external">https://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;String-StringBuffer-amp-StringBuilder&quot;&gt;&lt;a href=&quot;#String-StringBuffer-amp-StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;String , StringBuf
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="java" scheme="http://keren_akaya.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Lintcode review(7)</title>
    <link href="http://keren_akaya.com/2018/01/14/Lintcode-review-7/"/>
    <id>http://keren_akaya.com/2018/01/14/Lintcode-review-7/</id>
    <published>2018-01-15T04:32:15.000Z</published>
    <updated>2018-01-15T04:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hhh I will change to Lintcode for a while~</p><a id="more"></a><h2 id="Lintcode-626-Rectangle-Overlay"><a href="#Lintcode-626-Rectangle-Overlay" class="headerlink" title="Lintcode 626 Rectangle Overlay"></a>Lintcode 626 Rectangle Overlay</h2><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Given two rectangles, find if the given two rectangles overlap or not.</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>If we classify different situations for overlap, that would be a huge amount of work.</p><p>So we can consider when these two squares are not overlapped.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for a point.</span></div><div class="line"><span class="comment"> * class Point &#123;</span></div><div class="line"><span class="comment"> *     public int x, y;</span></div><div class="line"><span class="comment"> *     public Point() &#123; x = 0; y = 0; &#125;</span></div><div class="line"><span class="comment"> *     public Point(int a, int b) &#123; x = a; y = b; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * @param l1: top-left coordinate of first rectangle</span></div><div class="line"><span class="comment">     * @param r1: bottom-right coordinate of first rectangle</span></div><div class="line"><span class="comment">     * @param l2: top-left coordinate of second rectangle</span></div><div class="line"><span class="comment">     * @param r2: bottom-right coordinate of second rectangle</span></div><div class="line"><span class="comment">     * @return: true if they are overlap or false</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doOverlap</span><span class="params">(Point l1, Point r1, Point l2, Point r2)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span>( l1.y &lt; r2.y || r1.y&gt;l2.y)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>( l1.x &gt; r2.x || r1.x &lt; l2.x)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Lintcode-628-Maximum-Subtree"><a href="#Lintcode-628-Maximum-Subtree" class="headerlink" title="Lintcode 628 Maximum Subtree"></a>Lintcode 628 Maximum Subtree</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Given a binary tree, find the subtree with maximum sum. Return the root of the subtree.</p><h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods:"></a>Methods:</h4><p>Divide the work into two parts:</p><ol><li>to calculate the sum of each node and its childnodes;</li><li>to update maxinum and the TreeNode.</li></ol><p>So we need to use global variables.</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * @param root: the root of binary tree</span></div><div class="line"><span class="comment">     * @return: the maximum weight node</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     </div><div class="line">    <span class="keyword">private</span> TreeNode resNode=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSum=Integer.MIN_VALUE;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">findSubtree</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        MaxSum(root);</div><div class="line">        <span class="keyword">return</span> resNode;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">MaxSum</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = MaxSum(root.left);</div><div class="line">        <span class="keyword">int</span> right = MaxSum(root.right);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> sum = left+right+root.val;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(sum&gt;maxSum)&#123;</div><div class="line">            maxSum=sum;</div><div class="line">            resNode = root;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Lintcode-627-Longest-Palindrome"><a href="#Lintcode-627-Longest-Palindrome" class="headerlink" title="Lintcode 627 Longest Palindrome"></a>Lintcode 627 Longest Palindrome</h2><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h4><p>Given a string whichconsists of lowercase or uppercase letters, find the length of the longestpalindromes that can be built with those letters.</p><p>This is case sensitive, forexample “Aa” is not considered apalindrome here.</p><h4 id="Methods-2"><a href="#Methods-2" class="headerlink" title="Methods:"></a>Methods:</h4><p>Not very hard. Use hash and to count even and odd number.</p><p>But the most important is that ! <strong>Get even by substract one from odd!!</strong></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * @param s: a string which consists of lowercase or uppercase letters</span></div><div class="line"><span class="comment">     * @return: the length of the longest palindromes that can be built</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="comment">// write your code here</span></div><div class="line">       </div><div class="line">        <span class="keyword">int</span> l = s.length();</div><div class="line">        <span class="keyword">if</span>(l&lt;=<span class="number">1</span>) <span class="keyword">return</span> l;</div><div class="line">      </div><div class="line">        <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</div><div class="line">      </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:sc)</div><div class="line">            hash[c]++;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d:hash)&#123;</div><div class="line">            <span class="keyword">if</span>(d%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">                sum+=d;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                sum+=d-<span class="number">1</span>;</div><div class="line">                flag=<span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">            <span class="keyword">return</span> sum+max+<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> sum+max;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hhh I will change to Lintcode for a while~&lt;/p&gt;
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="lintcode" scheme="http://keren_akaya.com/tags/lintcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Review(6)</title>
    <link href="http://keren_akaya.com/2018/01/12/Leetcode-Review-6/"/>
    <id>http://keren_akaya.com/2018/01/12/Leetcode-Review-6/</id>
    <published>2018-01-12T23:15:18.000Z</published>
    <updated>2018-01-12T23:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-102-Binary-Tree-Level-Order-Traversal"><a href="#Leetcode-102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="Leetcode 102 Binary Tree Level Order Traversal"></a>Leetcode 102 Binary Tree Level Order Traversal</h2><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Given a binary tree, return the <em>level order</em> traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">3</div><div class="line">  / \</div><div class="line"> 9  20</div><div class="line">   /  \</div><div class="line">  15   7</div></pre></td></tr></table></figure><p>return its level order traversal as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [9,20],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>Use bfs to go through the whole tree, and use a queue to get the node.</p><p>Problem is: how to know the tree level.</p><p>We can use a variable <em>count</em> to know this. When count ==0, which means we have accomplish a level of the tree. Then the size of queue would be the number of nodes in the next level.</p><p>Everytime we pop a node ,we minus count.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for a binary tree node.</span></div><div class="line"><span class="comment"> * public class TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode left;</span></div><div class="line"><span class="comment"> *     TreeNode right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">        queue.offer(root);</div><div class="line">        <span class="keyword">int</span> count=<span class="number">1</span>;</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</div><div class="line">            TreeNode tmp=queue.poll();</div><div class="line">            count--;</div><div class="line">            </div><div class="line">            list.add(tmp.val);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.offer(tmp.left);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>)&#123;</div><div class="line">                queue.offer(tmp.right);</div><div class="line">            &#125;  </div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">                count=queue.size();</div><div class="line">                result.add(list);</div><div class="line">                list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            &#125;       </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;     </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-538-Conver-BST-to-Greater-Tree"><a href="#Leetcode-538-Conver-BST-to-Greater-Tree" class="headerlink" title="Leetcode 538 Conver BST to Greater Tree"></a>Leetcode 538 Conver BST to Greater Tree</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Input: The root of a Binary Search Tree like this:</div><div class="line">              5</div><div class="line">            /   \</div><div class="line">           2     13</div><div class="line"></div><div class="line">Output: The root of a Greater Tree like this:</div><div class="line">             18</div><div class="line">            /   \</div><div class="line">          20     13</div></pre></td></tr></table></figure><h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods:"></a>Methods:</h4><p>Go through the tree from the node which has the largest value to the one that has the least value.(The reverse version of in-order traversal).</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for a binary tree node.</span></div><div class="line"><span class="comment"> * public class TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode left;</span></div><div class="line"><span class="comment"> *     TreeNode right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        TreeNode head = root;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(root!=<span class="keyword">null</span> || !stack.isEmpty())&#123;</div><div class="line">            <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</div><div class="line">                stack.push(root);</div><div class="line">                root=root.right;  </div><div class="line">            &#125;</div><div class="line">            TreeNode tmp = stack.pop();</div><div class="line">            sum+=tmp.val;</div><div class="line">            tmp.val=sum;</div><div class="line">            root=tmp.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-79-Word-Search"><a href="#Leetcode-79-Word-Search" class="headerlink" title="Leetcode 79 Word Search"></a>Leetcode 79 Word Search</h2><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h4><p>Given a 2D board and a word, find if the word exists in the grid.</p><p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p><p>For example,<br>Given <strong>board</strong> =</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;E&apos;],</div><div class="line">  [&apos;S&apos;,&apos;F&apos;,&apos;C&apos;,&apos;S&apos;],</div><div class="line">  [&apos;A&apos;,&apos;D&apos;,&apos;E&apos;,&apos;E&apos;]</div><div class="line">]</div></pre></td></tr></table></figure><p><strong>word</strong> = <code>&quot;ABCCED&quot;</code>, -&gt; returns <code>true</code>,<br><strong>word</strong> = <code>&quot;SEE&quot;</code>, -&gt; returns <code>true</code>,<br><strong>word</strong> = <code>&quot;ABCB&quot;</code>, -&gt; returns <code>false</code>.</p><h4 id="Methods-2"><a href="#Methods-2" class="headerlink" title="Methods:"></a>Methods:</h4><p>Use dfs</p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = board.length;</div><div class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> n = board[<span class="number">0</span>].length;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> k = word.length();</div><div class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(dfs(board,m,n,word,i,j,<span class="number">0</span>,visited)) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">               </div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board,<span class="keyword">int</span> m, <span class="keyword">int</span> n, String word,<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> index,<span class="keyword">boolean</span>[][] visited)</span></span>&#123;      </div><div class="line">        <span class="keyword">if</span>(index==word.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||j&lt;<span class="number">0</span>||i&gt;=m||j&gt;=n||visited[i][j]!=<span class="keyword">false</span>||board[i][j]!=word.charAt(index))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        visited[i][j]=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">boolean</span> check = dfs(board,m,n,word,i+<span class="number">1</span>,j,index+<span class="number">1</span>,visited)||</div><div class="line">                        dfs(board,m,n,word,i-<span class="number">1</span>,j,index+<span class="number">1</span>,visited)||</div><div class="line">                        dfs(board,m,n,word,i,j+<span class="number">1</span>,index+<span class="number">1</span>,visited)||</div><div class="line">                        dfs(board,m,n,word,i,j-<span class="number">1</span>,index+<span class="number">1</span>,visited);</div><div class="line">        visited[i][j]=<span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> check;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-212-Word-Search-II"><a href="#Leetcode-212-Word-Search-II" class="headerlink" title="Leetcode 212 Word Search II"></a>Leetcode 212 Word Search II</h2><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description:"></a>Description:</h4><p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p><p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p><p>For example,<br>Given <strong>words</strong> = <code>[&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</code> and <strong>board</strong> =</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [&apos;o&apos;,&apos;a&apos;,&apos;a&apos;,&apos;n&apos;],</div><div class="line">  [&apos;e&apos;,&apos;t&apos;,&apos;a&apos;,&apos;e&apos;],</div><div class="line">  [&apos;i&apos;,&apos;h&apos;,&apos;k&apos;,&apos;r&apos;],</div><div class="line">  [&apos;i&apos;,&apos;f&apos;,&apos;l&apos;,&apos;v&apos;]</div><div class="line">]</div></pre></td></tr></table></figure><p>Return </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&quot;eat&quot;,&quot;oath&quot;]</div></pre></td></tr></table></figure><h4 id="Methods-3"><a href="#Methods-3" class="headerlink" title="Methods:"></a>Methods:</h4><p>Use <em>Word Search</em></p><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findWords</span><span class="params">(<span class="keyword">char</span>[][] board, String[] words)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> m = board.length;</div><div class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">        <span class="keyword">int</span> n = board[<span class="number">0</span>].length;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> k = words.length;</div><div class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> z=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(z&lt;k)&#123;</div><div class="line">            <span class="keyword">while</span>(z+<span class="number">1</span>&lt;k &amp;&amp; words[z]==words[z+<span class="number">1</span>])</div><div class="line">                z++;</div><div class="line">            <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(exist(board,words[z],m,n,i,j,<span class="number">0</span>,visited)) </div><div class="line">                        <span class="keyword">if</span>(!list.contains(words[z]))</div><div class="line">                            list.add(words[z]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            z++;</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board,String word,<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> index, <span class="keyword">boolean</span>[][] visited)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(index==word.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||j&lt;<span class="number">0</span>||i&gt;=m||j&gt;=n||visited[i][j]||board[i][j]!=word.charAt(index))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        visited[i][j]=<span class="keyword">true</span>;</div><div class="line">        <span class="keyword">boolean</span> check = exist(board,word,m,n,i+<span class="number">1</span>,j,index+<span class="number">1</span>,visited)||</div><div class="line">                        exist(board,word,m,n,i-<span class="number">1</span>,j,index+<span class="number">1</span>,visited)||</div><div class="line">                        exist(board,word,m,n,i,j+<span class="number">1</span>,index+<span class="number">1</span>,visited)||</div><div class="line">                        exist(board,word,m,n,i,j-<span class="number">1</span>,index+<span class="number">1</span>,visited);</div><div class="line">        visited[i][j]=<span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> check;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>But there is better way..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Leetcode-102-Binary-Tree-Level-Order-Traversal&quot;&gt;&lt;a href=&quot;#Leetcode-102-Binary-Tree-Level-Order-Traversal&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Review(5)</title>
    <link href="http://keren_akaya.com/2018/01/11/Leetcode-Review-5/"/>
    <id>http://keren_akaya.com/2018/01/11/Leetcode-Review-5/</id>
    <published>2018-01-11T21:28:52.000Z</published>
    <updated>2018-01-11T22:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-438-Find-All-Anagrams-in-a-String"><a href="#Leetcode-438-Find-All-Anagrams-in-a-String" class="headerlink" title="Leetcode 438 Find All Anagrams in a String"></a>Leetcode 438 Find All Anagrams in a String</h2><p>There are several substring questions in leetcode.</p><p>And fortunately we can use a template to solve them.</p><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Given a string <strong>s</strong> and a <strong>non-empty</strong> string <strong>p</strong>, find all the start indices of <strong>p</strong>‘s anagrams in <strong>s</strong>.</p><p>Strings consists of lowercase English letters only and the length of both strings <strong>s</strong> and <strong>p</strong> will not be larger than 20,100.</p><p>The order of output does not matter.</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>I need to use Chinese to make me understand my thinking. LOL</p><p>还是用中文吧。</p><p>滑动窗口可以解决很多子字符串的问题</p><p>使用两个指针left&amp;right，来作为窗口的边界。count作为t和窗口中字符串的差异的个数。</p><p>用hash table来判断anagram的问题，也是一种非常好的方式。</p><p>如果hash[i]中的数字大于0，则说明在t里面有相应的char，差异减小，window增大。</p><p>如果差异减到0，则把左边界加入。</p><p>然后再移动左边界「如果hash（left）里的数》=0，则说明left的char是有效的，是出现在t中的，这个时候移动了左边界，则要对左边界进行补偿，所以count要增加」</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ls = s.length();</div><div class="line">        <span class="keyword">int</span> lp = p.length();</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(ls==<span class="number">0</span> || lp==<span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</div><div class="line">        <span class="keyword">char</span>[] array = p.toCharArray();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:array)</div><div class="line">            hash[c-<span class="string">'a'</span>]++;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> count=lp, start=<span class="number">0</span>, end=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(end&lt;ls)&#123;</div><div class="line">            <span class="keyword">if</span>(hash[s.charAt(end)-<span class="string">'a'</span>]&gt;<span class="number">0</span>)</div><div class="line">                count--;</div><div class="line">            hash[s.charAt(end)-<span class="string">'a'</span>]--;</div><div class="line">            end++;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)</div><div class="line">                list.add(start);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(end-start==lp)&#123;</div><div class="line">                <span class="keyword">if</span>(hash[s.charAt(start)-<span class="string">'a'</span>]&gt;=<span class="number">0</span>)</div><div class="line">                    count++;</div><div class="line">                hash[s.charAt(start)-<span class="string">'a'</span>]++;</div><div class="line">                start++;</div><div class="line">            &#125;          </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-76-Minimum-Window-Substring"><a href="#Leetcode-76-Minimum-Window-Substring" class="headerlink" title="Leetcode 76 Minimum Window Substring"></a>Leetcode 76 Minimum Window Substring</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p><p>For example,<br><strong>S</strong> = <code>&quot;ADOBECODEBANC&quot;</code><br><strong>T</strong> = <code>&quot;ABC&quot;</code></p><p>Minimum window is <code>&quot;BANC&quot;</code>.</p><p><strong>Note:</strong><br>If there is no such window in S that covers all characters in T, return the empty string <code>&quot;&quot;</code>.</p><p>If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.</p><h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods:"></a>Methods:</h4><p>这题就可以用上述的template。虽然是hard，但是我居然自己写出来了哈哈哈。</p><p>这个是上述问题的变种。</p><p>右边界的方法是不变的，问题是左边界。</p><p>左边界要移动有两种可能性：</p><ol><li>当count==0，即差异为0的时候，说明t在window里都找到了。这时候我们需要确定左边有没有冗余的东西可以删除。</li><li>当count==0，我们更新完最小字串的信息之后，需要滑动窗口。同样的，如果曾经出现在窗口里的字符被移动出去，我们需要对count++补偿。</li></ol><h4 id="Code：-1"><a href="#Code：-1" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lt = t.length();</div><div class="line">        <span class="keyword">int</span> ls = s.length();</div><div class="line">        <span class="keyword">int</span> minL=Integer.MAX_VALUE;</div><div class="line">        String min=<span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        <span class="keyword">char</span>[] array = t.toCharArray();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: array)</div><div class="line">            hash[c]++;</div><div class="line">            </div><div class="line">        <span class="keyword">int</span> count=lt,left=<span class="number">0</span>,right=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(right&lt;ls)&#123;</div><div class="line">            <span class="keyword">if</span>(hash[s.charAt(right)]&gt;<span class="number">0</span>)</div><div class="line">                count--;</div><div class="line">            hash[s.charAt(right)]--;</div><div class="line">            right++;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">while</span>(hash[s.charAt(left)]&lt;<span class="number">0</span>)&#123;</div><div class="line">                    hash[s.charAt(left)]++;</div><div class="line">                    left++;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(minL&gt;right-left)&#123;</div><div class="line">                    minL=right-left;</div><div class="line">                    min=s.substring(left,right);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(hash[s.charAt(left)]&gt;=<span class="number">0</span>)</div><div class="line">                    count++;</div><div class="line">                hash[s.charAt(left)]++;</div><div class="line">                left++;</div><div class="line">            &#125;            </div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> min;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-200-Number-of-Islands"><a href="#Leetcode-200-Number-of-Islands" class="headerlink" title="Leetcode 200 Number of Islands"></a>Leetcode 200 Number of Islands</h2><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h4><p>Given a 2d grid map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><h4 id="Methods-2"><a href="#Methods-2" class="headerlink" title="Methods:"></a>Methods:</h4><p>Use dfs.</p><p>Everytime we encounter an ‘1’, we try to turn the island around this ‘1’ into 0, so we won’t count repeatedly.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> m = grid.length;</div><div class="line">        <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>)&#123;</div><div class="line">                    dfs(grid,i,j,m,n);</div><div class="line">                    count++;</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid,<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=m || j&lt;<span class="number">0</span> || j&gt;=n || grid[i][j]!=<span class="string">'1'</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        grid[i][j]=<span class="string">'0'</span>;</div><div class="line">        dfs(grid,i+<span class="number">1</span>,j,m,n);</div><div class="line">        dfs(grid,i-<span class="number">1</span>,j,m,n);</div><div class="line">        dfs(grid,i,j+<span class="number">1</span>,m,n);</div><div class="line">        dfs(grid,i,j-<span class="number">1</span>,m,n);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Leetcode-438-Find-All-Anagrams-in-a-String&quot;&gt;&lt;a href=&quot;#Leetcode-438-Find-All-Anagrams-in-a-String&quot; class=&quot;headerlink&quot; title=&quot;Leetcode
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Review(4)</title>
    <link href="http://keren_akaya.com/2018/01/10/Leetcode-Review-4/"/>
    <id>http://keren_akaya.com/2018/01/10/Leetcode-Review-4/</id>
    <published>2018-01-10T18:33:22.000Z</published>
    <updated>2018-01-10T18:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-414-Third-Maximum-Number"><a href="#Leetcode-414-Third-Maximum-Number" class="headerlink" title="Leetcode 414 Third Maximum Number"></a>Leetcode 414 Third Maximum Number</h2><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Given a <strong>non-empty</strong> array of integers, return the <strong>third</strong> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>We can use an auxiliary array to maintain the top3 value.</p><p>And go through the <em>nums</em> to get the top 3.</p><p><strong>PS</strong> the aux array need to use <strong>LONG</strong> data type ,otherwise it would cause overflow.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span>[] top = &#123;Long.MIN_VALUE,Long.MIN_VALUE,Long.MIN_VALUE&#125;;</div><div class="line">        <span class="comment">//top3,top2,top1</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</div><div class="line">            <span class="keyword">if</span>(num&gt;top[<span class="number">2</span>])&#123;</div><div class="line">                top[<span class="number">0</span>]=top[<span class="number">1</span>];</div><div class="line">                top[<span class="number">1</span>]=top[<span class="number">2</span>];</div><div class="line">                top[<span class="number">2</span>]=num;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num&lt;top[<span class="number">2</span>]&amp;&amp;num&gt;top[<span class="number">1</span>])&#123;</div><div class="line">                top[<span class="number">0</span>]=top[<span class="number">1</span>];</div><div class="line">                top[<span class="number">1</span>]=num;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num&lt;top[<span class="number">1</span>]&amp;num&gt;top[<span class="number">0</span>])</div><div class="line">                top[<span class="number">0</span>]=num;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> top[<span class="number">0</span>]==Long.MIN_VALUE ? (<span class="keyword">int</span>)top[<span class="number">2</span>]:(<span class="keyword">int</span>)top[<span class="number">0</span>];</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#Leetcode-236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="Leetcode 236 Lowest Common Ancestor of a Binary Tree"></a>Leetcode 236 Lowest Common Ancestor of a Binary Tree</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p><p>According to the <a href="https://en.wikipedia.org/wiki/Lowest_common_ancestor" target="_blank" rel="external">definition of LCA on Wikipedia</a>: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _______3______</div><div class="line">    /              \</div><div class="line"> ___5__          ___1__</div><div class="line">/      \        /      \</div><div class="line">6      _2       0       8</div><div class="line">      /  \</div><div class="line">      7   4</div></pre></td></tr></table></figure><p>For example, the lowest common ancestor (LCA) of nodes <code>5</code> and <code>1</code> is <code>3</code>. Another example is LCA of nodes <code>5</code> and <code>4</code> is <code>5</code>, since a node can be a descendant of itself according to the LCA definition.</p><h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods:"></a>Methods:</h4><p>This problem needs to use recurrence to solve. I still feel very anxious about recurrence. (Need to draw the picture to get the idea).</p><p>The method is very simple:</p><ul><li>If p and q are in two different sides of root, root should be the LCA.</li><li>If p and q are in the same side of root, then the LCA would be in that side(recurrence)</li></ul><p>Then how to design the recurrence??? How to write from scratch..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for a binary tree node.</span></div><div class="line"><span class="comment"> * public class TreeNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     TreeNode left;</span></div><div class="line"><span class="comment"> *     TreeNode right;</span></div><div class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> root;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(root==p || root==q)</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        </div><div class="line">        TreeNode left = lowestCommonAncestor(root.left,p,q);</div><div class="line">        TreeNode right = lowestCommonAncestor(root.right,p,q);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(left!=<span class="keyword">null</span> &amp;&amp; right!=<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> left!=<span class="keyword">null</span>?left:right;        </div><div class="line">    &#125;      </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>把它当一个黑盒子。从最通用的情况来考虑。</p><h2 id="Leetcode-139-Word-Break"><a href="#Leetcode-139-Word-Break" class="headerlink" title="Leetcode 139 Word Break"></a>Leetcode 139 Word Break</h2><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h4><p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.</p><p>For example, given<br><em>s</em> = <code>&quot;leetcode&quot;</code>,<br><em>dict</em> = <code>[&quot;leet&quot;, &quot;code&quot;]</code>.</p><p>Return true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet code&quot;</code>.</p><h4 id="Methods-2"><a href="#Methods-2" class="headerlink" title="Methods:"></a>Methods:</h4><p>Dynamic Programming again.LOL</p><p>p[i] stands for that whether  there is a word break in substring of s[0:i].</p><p>So p[i]=true or not(p[j]+s[j:i]) j from 0 to i</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = s.length();</div><div class="line">        <span class="keyword">boolean</span>[] p = <span class="keyword">new</span> <span class="keyword">boolean</span>[l+<span class="number">1</span>];</div><div class="line">        p[<span class="number">0</span>]=<span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;l+<span class="number">1</span>;i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</div><div class="line">                p[i]=p[j]&amp;&amp;wordDict.contains(s.substring(j,i));</div><div class="line">                <span class="keyword">if</span>(p[i])</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;     </div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> p[l];          </div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Leetcode-414-Third-Maximum-Number&quot;&gt;&lt;a href=&quot;#Leetcode-414-Third-Maximum-Number&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 414 Third Maximum
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Review(3)</title>
    <link href="http://keren_akaya.com/2018/01/09/Leetcode-Review-3/"/>
    <id>http://keren_akaya.com/2018/01/09/Leetcode-Review-3/</id>
    <published>2018-01-10T04:35:30.000Z</published>
    <updated>2018-01-10T04:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-3-Longest-Substring-Without-Repeating-Characters"><a href="#Leetcode-3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="Leetcode 3 Longest Substring Without Repeating Characters"></a>Leetcode 3 Longest Substring Without Repeating Characters</h2><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Givena string, find the length of the longest substring without repeating characters.</p><p>Examples:</p><p>Given “abcabcbb”, the answer is “abc”, which the length is 3.</p><p>Given “bbbbb”, the answer is “b”, with the lengthof 1.</p><p>Given “pwwkew”, the answer is “wke”, with the lengthof 3. Note that the answer must be a substring, “pwke” is a subsequenceand not a substring.</p><h4 id="Method"><a href="#Method" class="headerlink" title="Method:"></a>Method:</h4><p>Remember that in “String” methods, there is a method named “indexOf(char c/String s) which can help to get the first occurrence index of the char or string.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">if</span>(length&lt;=<span class="number">1</span>) <span class="keyword">return</span> length;</div><div class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">            <span class="keyword">int</span> index = result.indexOf(s.charAt(i));</div><div class="line">            <span class="keyword">if</span>(index==-<span class="number">1</span>)&#123;</div><div class="line">                result = result+s.charAt(i);</div><div class="line">                max = Math.max(max,result.length());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                result = result.substring(index+<span class="number">1</span>)+s.charAt(i);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-189-Rotate-Array"><a href="#Leetcode-189-Rotate-Array" class="headerlink" title="Leetcode 189 Rotate Array"></a>Leetcode 189 Rotate Array</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Rotatean array of n elements to the right by k steps.</p><p>For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>This is awkward. I spent plenty of time doing this question.</p><p>There are two solutions. First one is easy to understanding while the second is in-place rotate.</p><ol><li><p>Use an auxiliary Array.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] rev = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            rev[(i+k)%nums.length]=nums[i];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">            nums[i]=rev[i];</div><div class="line">        &#125;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li><li><p>Use reverse three times.</p><p>rever(0,length-1);</p><p>reverse(0,k-1);</p><p>reverse(k,length-1);</p><p>And I want to emphasize that how to reverse a array</p><p>like A[start:end]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(start&lt;end)&#123;</div><div class="line">  exchange A[start] with A[end];</div><div class="line">  start++;</div><div class="line">  end--;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>So easy!! Why I spent so long to debug on it! </p><p>And I also want to mention how to exchange two number without extra space.</p><p>x=x-y</p><p>y=x+y</p><p>x=y-x</p><p>The following is the whole code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">       </div><div class="line">        <span class="keyword">int</span> length = nums.length;</div><div class="line">        k%=length;</div><div class="line">        <span class="keyword">if</span>(length&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">        reverse(nums,<span class="number">0</span>,length-<span class="number">1</span>);</div><div class="line">        reverse(nums,<span class="number">0</span>,k-<span class="number">1</span>);</div><div class="line">        reverse(nums,k,length-<span class="number">1</span>);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">while</span>(start&lt;end)&#123;</div><div class="line">            <span class="keyword">int</span> tmp = nums[start];</div><div class="line">            nums[start]=nums[end];</div><div class="line">            nums[end]=tmp;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="Leetcode-5-Longest-Palindromic-Substring"><a href="#Leetcode-5-Longest-Palindromic-Substring" class="headerlink" title="Leetcode 5 Longest Palindromic Substring"></a>Leetcode 5 Longest Palindromic Substring</h2><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h4><p>Given a string s,find the longest palindromic substring in s. You may assumethat the maximum length of s is 1000.</p><h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods:"></a>Methods:</h4><p>This is a very classic dynamic programming problem.</p><p>We can use 2d boolean array p, in which pij is used to check s.substring(i,j+1) is palindromic or not.</p><p>So,</p><p>Pij =( j-i&lt;3 || pi+1j-1) &amp;&amp;s.charAt(i)==s.charAt(j);</p><p>In order to not calculate repeatedly. We need to cal p from the bottom to top.</p><p>Finally to pick the longest substring.</p><p>And we had better to write j-i&lt;3 before pi+1j-1 otherwise it would cause outOfBoundary error.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> length = s.length();</div><div class="line">        <span class="keyword">if</span>(length&lt;=<span class="number">1</span>) <span class="keyword">return</span> s;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxl=<span class="number">0</span>;</div><div class="line">        String result=<span class="string">""</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span>[][] p = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)</div><div class="line">            p[i][i]=<span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=length-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;length;j++)&#123;</div><div class="line">                p[i][j] = s.charAt(i)==s.charAt(j) &amp;&amp; ((j-i&lt;=<span class="number">2</span>) ||p[i+<span class="number">1</span>][j-<span class="number">1</span>] );</div><div class="line">                <span class="keyword">if</span>(p[i][j]==<span class="keyword">true</span> &amp;&amp; j-i+<span class="number">1</span>&gt;maxl)&#123;</div><div class="line">                    result=s.substring(i,j+<span class="number">1</span>);</div><div class="line">                    maxl=j-i+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                    </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;       </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Leetcode-3-Longest-Substring-Without-Repeating-Characters&quot;&gt;&lt;a href=&quot;#Leetcode-3-Longest-Substring-Without-Repeating-Characters&quot; clas
      
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Review(2)</title>
    <link href="http://keren_akaya.com/2018/01/08/Leetcode-Review-2/"/>
    <id>http://keren_akaya.com/2018/01/08/Leetcode-Review-2/</id>
    <published>2018-01-09T04:21:16.000Z</published>
    <updated>2018-01-10T04:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然得知19号就是career fair, 吓得我精神抖擞。</p><p>一定要坚持！！</p><a id="more"></a><h2 id="Leetcode-98-Validate-Binary-Search-Tree"><a href="#Leetcode-98-Validate-Binary-Search-Tree" class="headerlink" title="Leetcode 98 Validate Binary Search Tree"></a>Leetcode 98 Validate Binary Search Tree</h2><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p> Assume aBST is defined as follows:</p><p> The leftsubtree of a node contains only nodes with keys less than the node’s key.</p><p>The rightsubtree of a node contains only nodes with keys greater than the node’s key.</p><p>Both theleft and right subtrees must also be binary search trees.</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>想法就是，按照中序遍历的顺序遍历这个binary tree, 然后check是否node的值是递增的（！注意，不是非减）</p><p>需要栈的辅助（非递归的中序遍历）</p><p>并且使while循环不断进行的条件是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">while(!stack.isEmpty() || root!=null)</div><div class="line">while(root!=null)</div><div class="line">&#123;</div><div class="line">left node blah</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行到整棵树的根节点和一开始的时候，会出现stack.isEmpty()==true的情况，但此时root!=null;</p><p>其他时候都是root会等于null，但是stack非空。</p><p>节点值比较小，所有用long作为tmp的type。</p><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public boolean isValidBST(TreeNode root) &#123;</div><div class="line">        if(root == null) return true;</div><div class="line">        </div><div class="line">        </div><div class="line">        Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;();</div><div class="line">        long tmp = Long.MIN_VALUE;</div><div class="line">        </div><div class="line"> </div><div class="line">        while(!stack.isEmpty()||root!=null)&#123;</div><div class="line">            while(root!=null)&#123;</div><div class="line">            stack.push(root);</div><div class="line">            root = root.left;    </div><div class="line">        &#125;</div><div class="line">            root = stack.pop();</div><div class="line">            if(root.val&lt;=tmp) return false;</div><div class="line">            tmp = root.val;</div><div class="line">            root = root.right;</div><div class="line">        &#125;</div><div class="line">        return true; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>大佬，我是真的不会dfs。</p><h2 id="Leetcode-4-Median-of-Two-Sorted-Arrays"><a href="#Leetcode-4-Median-of-Two-Sorted-Arrays" class="headerlink" title="Leetcode 4 Median of Two Sorted Arrays"></a>Leetcode 4 Median of Two Sorted Arrays</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Thereare two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the medianof the two sorted arrays. The overall run time complexity should be O(log(m+n)).</p><h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods:"></a>Methods:</h4><p>这题，我是脑子真的转不过来。</p><p>先用最土的方法吧: Merge sort. Find the median.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123;</div><div class="line">        </div><div class="line">        int l1 = nums1.length;</div><div class="line">        int l2 = nums2.length;</div><div class="line">        if(l1==0) return l2%2==0?(nums2[l2/2]+nums2[l2/2-1])/2.0:nums2[l2/2];</div><div class="line">        if(l2==0) return l1%2==0?(nums1[l1/2]+nums1[l1/2-1])/2.0:nums1[l1/2];</div><div class="line">        </div><div class="line">        int[] aux = new int[l1+l2];</div><div class="line">        </div><div class="line">        int i=0;</div><div class="line">        int j=0;</div><div class="line">        int k=0;</div><div class="line">        while(i&lt;l1 || j&lt;l2)&#123;</div><div class="line">            if(i&lt;l1 &amp;&amp; j&lt;l2)&#123;</div><div class="line">                if(nums1[i]&lt;nums2[j])</div><div class="line">                    aux[k++]=nums1[i++];</div><div class="line">                else</div><div class="line">                    aux[k++]=nums2[j++];</div><div class="line">            &#125;</div><div class="line">            else if(i&gt;=l1)</div><div class="line">                aux[k++]=nums2[j++];</div><div class="line">            else if(j&gt;=l2)</div><div class="line">                aux[k++]=nums1[i++];</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        return (l1+l2)%2==0?(aux[(l1+l2)/2]+aux[(l1+l2)/2-1])/2.0:aux[(l1+l2)/2];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>改天回来再做！</p><h2 id="Leetcode-7-Reverse-Integer"><a href="#Leetcode-7-Reverse-Integer" class="headerlink" title="Leetcode 7 Reverse Integer"></a>Leetcode 7 Reverse Integer</h2><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h4><p>Given a 32-bit signed integer, reverse digits of an integer.</p><h4 id="Methods-2"><a href="#Methods-2" class="headerlink" title="Methods:"></a>Methods:</h4><p>这题比较简单</p><p>但是有一个tricky的地方，就是如何判断是否overflow</p><p> 可以在每次乘10的时候，比较乘10之前和乘10之后的除了个位之外的数是否相同。</p><p>如果不同，就是溢出了。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int reverse(int x) &#123;</div><div class="line">        int rev=0;</div><div class="line">        while(x!=0)&#123;</div><div class="line">            int tail = rev;</div><div class="line">            rev = rev*10+x%10;</div><div class="line">            if(tail!=rev/10) return 0;</div><div class="line">            x=x/10;           </div><div class="line">        &#125;</div><div class="line">        return rev;      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>闲话：</p><p>网页快做来不及啦！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然得知19号就是career fair, 吓得我精神抖擞。&lt;/p&gt;
&lt;p&gt;一定要坚持！！&lt;/p&gt;
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Review (1)</title>
    <link href="http://keren_akaya.com/2018/01/07/Leetcode-Review-1/"/>
    <id>http://keren_akaya.com/2018/01/07/Leetcode-Review-1/</id>
    <published>2018-01-07T21:07:41.000Z</published>
    <updated>2018-01-10T04:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Leetcode上也做了一些题目了，但是一直都是在草稿本上写一些思路，感觉不用心写的话，用我的榆木脑袋怎么也记不住难点。所以打算之后每天在blog上记录一下做题的大致思路。（不知道能坚持多久呢T T）</p><a id="more"></a><h2 id="Leetcode-130-Surrounded-Regions"><a href="#Leetcode-130-Surrounded-Regions" class="headerlink" title="Leetcode 130 Surrounded Regions"></a>Leetcode 130 Surrounded Regions</h2><h4 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h4><p>Given a 2D boardcontaining ‘X’ and ‘O’ (the letter O), capture all regions surrounded by ‘X’.</p><p>A region iscaptured by flipping all ‘O’s into ‘X’s in that surrounded region.</p><h4 id="Method"><a href="#Method" class="headerlink" title="Method:"></a>Method:</h4><p>这题是昨天做的，所以印象非常深刻。</p><ul><li>所有和边缘的o相邻接的o都不会被包围进去。</li><li>把和最边缘的o相邻接的o都变成<em>,最后再把非</em>的o反转。</li></ul><h4 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public void solve(char[][] board) &#123;</div><div class="line">        </div><div class="line">        int m = board.length;</div><div class="line">        if(m==0) return;</div><div class="line">        int n = board[0].length;</div><div class="line">        </div><div class="line">        //只考虑周围一圈的o</div><div class="line">        for(int i=0;i&lt;m;i++)&#123;</div><div class="line">            if(i==0 || i==m-1)&#123;</div><div class="line">                for(int j = 0;j&lt;n;j++)&#123;</div><div class="line">                    if(board[i][j]==&apos;O&apos;)</div><div class="line">                        dfs(board,i,j,m,n);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                dfs(board,i,0,m,n);</div><div class="line">                dfs(board,i,n-1,m,n);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //最后反转</div><div class="line">        for(int i=0;i&lt;m;i++)&#123;</div><div class="line">            for(int j = 0;j&lt;n;j++)&#123;</div><div class="line">                if(board[i][j]==&apos;O&apos;)</div><div class="line">                    board[i][j]=&apos;X&apos;;</div><div class="line">                else if(board[i][j]==&apos;*&apos;)</div><div class="line">                    board[i][j]=&apos;O&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    public void dfs(char[][] board,int i, int j,int m, int n)&#123;</div><div class="line">        if(i&gt;=m || i&lt;0 || j&gt;=n || j&lt;0 || board[i][j] != &apos;O&apos;)</div><div class="line">            return;</div><div class="line">        board[i][j]=&apos;*&apos;;</div><div class="line">        dfs(board,i+1,j,m,n);</div><div class="line">        dfs(board,i-1,j,m,n);</div><div class="line">        dfs(board,i,j+1,m,n);</div><div class="line">        dfs(board,i,j-1,m,n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Leetcode-665-Non-decreasing-Array"><a href="#Leetcode-665-Non-decreasing-Array" class="headerlink" title="Leetcode 665 Non-decreasing Array"></a>Leetcode 665 Non-decreasing Array</h2><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h4><p>Given an array with n integers, your task is to check if it could becomenon-decreasing by modifying at most 1 element.</p><p>We define an arrayis non-decreasing if array[i] &lt;= array[i + 1] holds for every i (1&lt;= i &lt; n).</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods:"></a>Methods:</h4><p>遍历数组，然后修改数组以满足condition（数组大小非降）。然后check修改次数是否超过1。</p><p>写了半天情况。真的是，如果这种题笔试，我估计要死。</p><p>假设有 A B C这三个数分别是num[i-1] num[i] 和 num[i+1].</p><p>则为了非降，则有这两种大情况：</p><p>1.B&gt;C</p><p>2.A&gt;B</p><p>首先是B&gt;C。这里有两种改法，一种是令B=C,一种是令C=B。但是要怎么改，取决于A的大小。</p><p>If B&gt;C &amp;&amp; A&gt;C ===&gt; C=B</p><p>else if B&gt;C &amp;&amp; A&lt;=C ===&gt; B=C</p><p>为什么呢，当然是为了让尽量减少修改次数啦。可以体会一些，嗯嗯。</p><p>我最后再考虑A&gt;B的情况，在B修改之后的情况中，可能不需要考虑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean checkPossibility(int[] nums) &#123;</div><div class="line">        </div><div class="line">        int count=0;</div><div class="line">        int n = nums.length;</div><div class="line">        if(n&lt;=2)</div><div class="line">            return true;</div><div class="line">        </div><div class="line">        for(int i=1;i&lt;n-1&amp;&amp;count&lt;2;i++)&#123;</div><div class="line">            if(nums[i+1]&lt;nums[i])&#123;</div><div class="line">                count++;</div><div class="line">                if(nums[i-1]&gt;nums[i+1])</div><div class="line">                     nums[i+1]=nums[i];</div><div class="line">                else</div><div class="line">                    nums[i]=nums[i+1];</div><div class="line">            &#125;</div><div class="line">            if(nums[i-1]&gt;nums[i])&#123;</div><div class="line">                nums[i-1]=nums[i];</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">           </div><div class="line">        </div><div class="line">        return count&lt;=1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>闲话：</p><p>最近看aldnoah zero。真的是无比心疼小天使Slaine。尽管已经知道他不会有的好的结局，还是希望能好好把他或辉煌或悲惨的过去再好好描绘一遍。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1515370664564&amp;di=4cb0e222002e56e17b7b39bfb8daa41a&amp;imgtype=0&amp;src=http%3A%2F%2Fi2.hdslb.com%2Fbfs%2Farchive%2F15b6984d2acbdbcff62e810464afa0ca4082998a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Leetcode上也做了一些题目了，但是一直都是在草稿本上写一些思路，感觉不用心写的话，用我的榆木脑袋怎么也记不住难点。所以打算之后每天在blog上记录一下做题的大致思路。（不知道能坚持多久呢T T）&lt;/p&gt;
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>このマンガがすごい! for 2006</title>
    <link href="http://keren_akaya.com/2017/11/04/sugoi-2006/"/>
    <id>http://keren_akaya.com/2017/11/04/sugoi-2006/</id>
    <published>2017-11-04T04:28:47.000Z</published>
    <updated>2017-11-04T14:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/sugoi/2006/boys/all.jpg"><br>This the collection for 2006 このマンガがすごい!</p><h2 id="男性部門"><a href="#男性部門" class="headerlink" title="男性部門"></a>男性部門</h2><ol><li>《PLUTO ～冥王～》 | 浦澤直樹</li><li>《死亡筆記》 | 大場鸫 小畑健</li><li>《失踪日記》 | 吾妻ひでお</li><li>《工作狂》 | 安野モヨコ</li><li>《鋼之煉金術師》 | 荒川弘 </li><li>《異變者》 | 山本英夫</li><li>《萌菌物語》/農大菌物語  | 石川雅之 </li><li>《王牌投手-振臂高揮 》 | 樋口朝</li><li>《叛逆之子》 | 新井英樹 </li><li>《團地智雄》 | 小田扉</li></ol><a id="more"></a><p><img src="/images/sugoi/2006/girls/all.jpg"></p><h2 id="女性部門"><a href="#女性部門" class="headerlink" title="女性部門"></a>女性部門</h2><ol><li>《蜂蜜幸運草》 | 羽海野千花</li><li>《交響情人夢》 | 二之宫知子</li><li>《NANA》 | 矢澤愛 </li><li>《vulvala异界》 | 萩尾望都 </li><li>《Pride邁向榮耀之路》 | 一條由香莉 </li><li>《大奧》 | 吉永史</li><li>《フラワー・オブ・ライフ 》 | よしながふみ</li><li>《きせかえユカちゃん 》 | 東村明子 </li><li>《魔女的考驗》 | 安野モヨコ </li><li>《舞姫》 | 山岸凉子 </li></ol><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><table><thead><tr><th style="text-align:left">男性部門</th><th style="text-align:left">女性部門</th></tr></thead><tbody><tr><td style="text-align:left">PLUTO ～冥王～》  浦澤直樹 <img src="/images/sugoi/2006/boys/1.jpg" width="300" height="200" align="center"></td><td style="text-align:left">《蜂蜜幸運草》  羽海野千花 <img src="/images/sugoi/2006/girls/1.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《死亡筆記》 大場鸫 小畑健 <img src="/images/sugoi/2006/boys/2.jpg" width="300" height="200" align="center"></td><td style="text-align:left">《交響情人夢》  二之宫知子 <img src="/images/sugoi/2006/girls/2.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《失踪日記》  吾妻ひでお <img src="/images/sugoi/2006/boys/3.JPG" width="300" height="200" align="center"></td><td style="text-align:left">《NANA》 矢澤愛  <img src="/images/sugoi/2006/girls/3.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《工作狂》  安野モヨコ <img src="/images/sugoi/2006/boys/4.jpg" width="300" height="200" align="center"></td><td style="text-align:left">《vulvala异界》 萩尾望都 <img src="/images/sugoi/2006/girls/4.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《鋼之煉金術師》  荒川弘 <img src="/images/sugoi/2006/boys/5.jpg" width="300" height="200" align="center"></td><td style="text-align:left">《Pride邁向榮耀之路》 一條由香莉 <img src="/images/sugoi/2006/girls/5.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《異變者》 山本英夫 <img src="/images/sugoi/2006/boys/6.jpg" width="300" height="200" align="center"></td><td style="text-align:left">大奧》 吉永史 <img src="/images/sugoi/2006/girls/6.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《萌菌物語》/農大菌物語  石川雅之 <img src="/images/sugoi/2006/boys/7.jpeg" width="300" height="200" align="center"></td><td style="text-align:left">《フラワー・オブ・ライフ 》 よしながふみ <img src="/images/sugoi/2006/girls/7.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《叛逆之子》  新井英樹  <img src="/images/sugoi/2006/boys/9.jpeg" width="300" height="200" align="center"></td><td style="text-align:left">《魔女的考驗》  安野モヨコ <img src="/images/sugoi/2006/girls/9.jpg" width="300" height="200" align="center"></td></tr><tr><td style="text-align:left">《團地智雄》 小田扉 <img src="/images/sugoi/2006/boys/10.jpg" width="300" height="200" align="center"></td><td style="text-align:left">《舞姫》 山岸凉子  <img src="/images/sugoi/2006/girls/10.jpg" width="300" height="200" align="center"></td></tr></tbody></table><p>2006真是一个好年。<br>2006出品的作品到现在还是风靡啊。<br>看过五本。反而是女性部门的作品我更熟悉，NANA当时真是迷到不行。果然我还是一个少女hhhh。<br>但是男性部门的作品，钢炼和Death Note，真是不可逾越的经典制作啊。<br>其实还是可以看出，画风决定胜负，LOL。<br>PS：安野モヨコ好厉害，两个部门都上榜，而且好像还有改编电视剧？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sugoi/2006/boys/all.jpg&quot;&gt;&lt;br&gt;This the collection for 2006 このマンガがすごい!&lt;/p&gt;
&lt;h2 id=&quot;男性部門&quot;&gt;&lt;a href=&quot;#男性部門&quot; class=&quot;headerlink&quot; title=&quot;男性部門&quot;&gt;&lt;/a&gt;男性部門&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;《PLUTO ～冥王～》 | 浦澤直樹&lt;/li&gt;
&lt;li&gt;《死亡筆記》 | 大場鸫 小畑健&lt;/li&gt;
&lt;li&gt;《失踪日記》 | 吾妻ひでお&lt;/li&gt;
&lt;li&gt;《工作狂》 | 安野モヨコ&lt;/li&gt;
&lt;li&gt;《鋼之煉金術師》 | 荒川弘 &lt;/li&gt;
&lt;li&gt;《異變者》 | 山本英夫&lt;/li&gt;
&lt;li&gt;《萌菌物語》/農大菌物語  | 石川雅之 &lt;/li&gt;
&lt;li&gt;《王牌投手-振臂高揮 》 | 樋口朝&lt;/li&gt;
&lt;li&gt;《叛逆之子》 | 新井英樹 &lt;/li&gt;
&lt;li&gt;《團地智雄》 | 小田扉&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="odds" scheme="http://keren_akaya.com/categories/odds/"/>
    
    
      <category term="このマンガがすごい!" scheme="http://keren_akaya.com/tags/%E3%81%93%E3%81%AE%E3%83%9E%E3%83%B3%E3%82%AC%E3%81%8C%E3%81%99%E3%81%94%E3%81%84/"/>
    
  </entry>
  
  <entry>
    <title>Collection of konomanga</title>
    <link href="http://keren_akaya.com/2017/11/01/sugoi/"/>
    <id>http://keren_akaya.com/2017/11/01/sugoi/</id>
    <published>2017-11-01T05:01:03.000Z</published>
    <updated>2017-11-01T05:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/sugoi.png"></p><p>I want to do build a collection of konomanga. Easy for myself to search the manga.</p><p>想要慢慢开始做一个汇总。这本漫画真厉害！的汇总。记录一下自己看过的或者没看过的，以后好找。哈哈。</p><p>このマンガがすごい!</p><a id="more"></a><p>它的网站是(WEB)：<a href="http://konomanga.jp/" target="_blank" rel="external">このマンガがすごい!</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sugoi.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;I want to do build a collection of konomanga. Easy for myself to search the manga.&lt;/p&gt;
&lt;p&gt;想要慢慢开始做一个汇总。这本漫画真厉害！的汇总。记录一下自己看过的或者没看过的，以后好找。哈哈。&lt;/p&gt;
&lt;p&gt;このマンガがすごい!&lt;/p&gt;
    
    </summary>
    
      <category term="odds" scheme="http://keren_akaya.com/categories/odds/"/>
    
    
      <category term="このマンガがすごい!" scheme="http://keren_akaya.com/tags/%E3%81%93%E3%81%AE%E3%83%9E%E3%83%B3%E3%82%AC%E3%81%8C%E3%81%99%E3%81%94%E3%81%84/"/>
    
  </entry>
  
  <entry>
    <title>腰酸背痛</title>
    <link href="http://keren_akaya.com/2017/10/27/art/"/>
    <id>http://keren_akaya.com/2017/10/27/art/</id>
    <published>2017-10-27T20:37:44.000Z</published>
    <updated>2017-10-27T20:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近作息太不健康了，天天就是在电脑面前。</p><p>其实我一直是一个很早睡觉的人，一般超过凌晨1点就觉得是修了不得了的仙。</p><p>然而早上起来刷刷朋友圈，凌晨3点4点还有人在挑灯夜战，顿时觉得自己不是个能吃苦的人。</p><a id="more"></a><p>可能我比较安逸。死于安逸，生于忧患。</p><p>文字水平太低下了，以后要多写文章。</p><p>嗯。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近作息太不健康了，天天就是在电脑面前。&lt;/p&gt;
&lt;p&gt;其实我一直是一个很早睡觉的人，一般超过凌晨1点就觉得是修了不得了的仙。&lt;/p&gt;
&lt;p&gt;然而早上起来刷刷朋友圈，凌晨3点4点还有人在挑灯夜战，顿时觉得自己不是个能吃苦的人。&lt;/p&gt;
    
    </summary>
    
      <category term="odds" scheme="http://keren_akaya.com/categories/odds/"/>
    
    
      <category term="nonsense" scheme="http://keren_akaya.com/tags/nonsense/"/>
    
  </entry>
  
  <entry>
    <title>Include customized css&amp;js</title>
    <link href="http://keren_akaya.com/2017/10/27/Include-customized-css-js/"/>
    <id>http://keren_akaya.com/2017/10/27/Include-customized-css-js/</id>
    <published>2017-10-27T15:02:31.000Z</published>
    <updated>2017-10-27T18:40:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>I want to include my own custom css and js. I tried just simply put .css and .js in the same directory as html or build my own folder to store them, didn’t work.</p><p>Following is how it works.</p><a id="more"></a><h3 id="Include-js-1"><a href="#Include-js-1" class="headerlink" title="Include js_1"></a>Include js_1</h3><ul><li>Put .js under \theme\your theme\source\js\src\</li><li>Find _layout.swig under \theme\your theme\layout\</li><li>Include script in this file.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/yourfilename.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><hr><h3 id="Include-js-2"><a href="#Include-js-2" class="headerlink" title="Include js_2"></a>Include js_2</h3><p>Directly add js in html file.</p><h3 id="Include-css-1"><a href="#Include-css-1" class="headerlink" title="Include css_1"></a>Include css_1</h3><p>Add another css file is same as js.</p><p>If want to change attribute of theme’s elements, just open Inspector of browser to get the name of your css selector~</p><hr><h3 id="Include-css-2"><a href="#Include-css-2" class="headerlink" title="Include css_2"></a>Include css_2</h3><p>This works for me.</p><p>Find yourfolder/theme/css/main.styl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//My Css</div><div class="line">//----------------------------------</div><div class="line">@import &quot;_mycss/mycss&quot;;</div></pre></td></tr></table></figure><p>Then find this folder and build a new folder name “_mycss”, whatever you like and new a styl file.</p><p>Add css style in that file and add classname in html.</p><p>That is it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I want to include my own custom css and js. I tried just simply put .css and .js in the same directory as html or build my own folder to store them, didn’t work.&lt;/p&gt;
&lt;p&gt;Following is how it works.&lt;/p&gt;
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="hexo" scheme="http://keren_akaya.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>leetcode --amazon</title>
    <link href="http://keren_akaya.com/2017/10/26/leetcode-amazon/"/>
    <id>http://keren_akaya.com/2017/10/26/leetcode-amazon/</id>
    <published>2017-10-27T03:27:23.000Z</published>
    <updated>2017-10-27T03:29:10.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="leetcode" scheme="http://keren_akaya.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Implement my Hexo</title>
    <link href="http://keren_akaya.com/2017/10/26/hexo-implement/"/>
    <id>http://keren_akaya.com/2017/10/26/hexo-implement/</id>
    <published>2017-10-26T14:17:05.000Z</published>
    <updated>2017-10-27T05:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>This may be big progress in my learning road,lol.  </p><p>All in all, I implemented my first blog based on GitPage + Hexo. After several days struggles, I finally accomplished the basic framework of it. So I try to record how I did this ^.^.</p><p>This article would consists of three part:</p><ol><li>Install Hexo</li><li>Hexo Instruction</li></ol><a id="more"></a><hr><h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h2><h3 id="Hexo-environment-configeration"><a href="#Hexo-environment-configeration" class="headerlink" title="Hexo environment configeration"></a>Hexo environment configeration</h3><p>Just before installing Hexo, we need to install some dependencies. I use <a href="https://github.com/Homebrew/legacy-homebrew" target="_blank" rel="external">Homebrew</a> to install them, so I recommend Mac’s users to use homebrew. Very helpful~</p><p>Please have Homebrew installed first.</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>Open your terminal and type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure><p>Use Homebrew to install, Git would be installed in /usr/local/Cellar/git/.</p><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install node</div></pre></td></tr></table></figure><p>Use Homebrew to install, Git would be installed in /usr/local/Cellar/node/.</p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>Open your terminal and type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo -g</div></pre></td></tr></table></figure><p>Wow, finished!</p><p>If we want to update our hexo, simply type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update hexo -g</div></pre></td></tr></table></figure><p>Then, we initiate a folder to save files of your site:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div></pre></td></tr></table></figure><p>Wait a second, we will see</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ INFO Start blogging with Hexo!</div></pre></td></tr></table></figure><p>Yeah, we finished!</p><hr><h3 id="Hexo-Instruction"><a href="#Hexo-Instruction" class="headerlink" title="Hexo Instruction"></a>Hexo Instruction</h3><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;POST NAME&quot;</div></pre></td></tr></table></figure><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure><p>then we can debug our site in localhost.</p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><p>After we new a post, we will have .md file under /yourBlogFolder/source/_post folder. Use this instruction to generate static files(html) for this .md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure><h4 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h4><p>Once you think your modification finished, just deploy it to your git.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;This may be big progress in my learning road,lol.  &lt;/p&gt;
&lt;p&gt;All in all, I implemented my first blog based on GitPage + Hexo. After several days struggles, I finally accomplished the basic framework of it. So I try to record how I did this ^.^.&lt;/p&gt;
&lt;p&gt;This article would consists of three part:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Hexo&lt;/li&gt;
&lt;li&gt;Hexo Instruction&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="learning" scheme="http://keren_akaya.com/categories/learning/"/>
    
    
      <category term="hexo" scheme="http://keren_akaya.com/tags/hexo/"/>
    
  </entry>
  
</feed>
